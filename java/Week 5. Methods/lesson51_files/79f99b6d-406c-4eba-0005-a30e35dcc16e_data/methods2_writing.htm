<html><head>
<title>Writing methods</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;

   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
-->
</style>

</head>

<body text="#000000" bgcolor="#FFFFFF">
<h1>Writing Methods</h1>
<p> First we will go over the general syntax for writing a method. Then we will 
  write our own method, and finally we will test our method. </p>
<h2>Syntax</h2>
<pre class="segment">modifiers returnType methodName(list_of_parameters)  //method header
{
   //statements in method body
}
</pre>
<ul>
  <li>modifiers are keywords like <code>public</code> or <code>static</code>. 
    <code>public</code> means that any one can use the method. We will talk about 
    what <code>static</code> means when we talk about classes. Right now all the 
    methods we write will need to be <code>static</code>.</li>
  <li>returnType tells the data type of the value that is returned. returnType 
    might be int, double, String or any other data type. If no value is return, 
    the returnType is specified as void. Our main methods' return types have been 
    void. <code>println's</code> return type is void. <code>Scanner's nextInt</code> 
    method has a return type of <code>int</code>.<br>
    <br>
  </li>
  <ul>
    <li>If we looked at the source code for the <code>PrintStream</code> class 
      in the Java libraries, we would see that the method header for the <code>println</code> 
      method is<br>
      <br>
      <span class="segment">public void println(String x)</span> <br>
      <br>
    </li>
  </ul>
  <li> methodName can be any valid Java identifier. By convention methods names 
    start with lowercase and use camel casing. Remember thisIsCamelCasing. Follow 
    the convention for naming your methods</li>
  <li>list_of_parameters are the parameters the method needs to work. There many 
    be zero, one, or many parameters.</li>
  <ul>
    <li> <code>Scanner's nextInt()</code> method has no parameters</li>
    <li><code>System.out.println(String x)</code> method takes a <code>String 
       </code> parameter</li>
    <li><code>JOptionPane.showMessageDialog()</code> method can take several parameters</li>
  </ul>
  <li>The method body consists of a group of statements inside opening and closing 
    braces { }. These statements execute as a group.</li>
</ul>
  <p>&nbsp;</p>
<h2>Writing our own method </h2>
<p>Here is a method that will return the minimum of two integers.</p>
<p>&nbsp;</p>
<pre class="segment">    public static int min(int num1, int num2) //method header
    {
       int minimum = num1;

       if (num2 &lt; num1)
       {
          minimum = num2;
       }

       return minimum;
    }
</pre>
<p>&nbsp;</p>
<p>Let's talk about the parts of the method header.</p>
<ul>
  <li><code>public</code> means that any code in any class can call this method.</li>
  <li><code>static</code> - this method has to be static so it can be called by 
    the main method. If it is not static you have a syntax error. Eclipse will 
    put a red squiggly line under a method call to min from the main method. The 
    error message is something like "Can not reference a non-static member 
    from a static context"</li>
  <li> <code>int</code> is the return type of the method. When we say <code>return 
    minimum;</code> in the code above, <code>minimum</code> is an <code>int</code>.</li>
  <li>The name of the method is <code>min</code>. Notice it begins with a lowercase 
    letter. We will invoke the method later using this name. </li>
  <li>The list of parameters in the method header are called the formal parameters. 
    These specify the data types of the values the caller will pass to the method. 
    The statements in the method will use these names for the values passed.<br>
    <br>
    <ul>
      <li> The <code>min</code> method's parameter list consists of two ints. 
        We give them the names, num1 and num2. The parameter list says, "Don't 
        come see me unless you bring two <code>ints</code> along."<br>
        <br>
      </li>
    </ul>
  </li>
  <li>The method body consists of statements between curly braces. These methods 
    are executed when the method is invoked. These statements will use the variable names <code>num1</code> and <code>num2</code> to refer to the values passed as parameters.</li>
</ul>

<p>The name of a method and its parameter list is called the method signature. 
</p>
<h2>Multiple return Statements</h2>
<p>In good structured programming a method should have at most one 
return statement. (If the method has a return type of void, no return 
statement is needed). Your text often uses multiple returns. I do not 
approve of that style and do not want you to use it. It is not too bad 
to have two returns in a very short method, but as the method gets 
longer and the number of returns increases, the code becomes difficult 
to read.</p>
<p>On page 160, the sign method has three return statements. Here is an 
example of how to write the same method with one return to show you how 
it can be done. </p>
<pre class="segment">public static int sign(int n)<br>{<br>int result = 0;<br>if (n &gt; 0)<br>{<br>  result = 1;<br>}<br>else if (n &lt; 0)<br>{<br>  result = -1;<br>}<br>return result;       <br>}<br>

</pre>
<p>&nbsp;</p>
<h2>Documentation</h2>
<p>&nbsp;</p>
<p>All methods should be documented with comments. The comments need to tell what 
  the method does and what the inputs and outputs are. Inputs are the parameters. 
  Output is the return value. For all public methods in Java, use javadoc notation 
  for the comments explaining how another programmer can use the method.</p>
<p>Here is the javadoc style comment for the min method. This should be placed 
  directly above the method header.</p>
<pre class="segment">/**
   Gets the smaller of two values
   @param num1 the first number
   @param num2 the second number
   @return the smaller of the two values
*/
public static int min(int num1, int num2)
{ ...
</pre>

<p>Use an @param tag to describe each parameter. It has the form @param,
 then the 
  variable name, and then what the variable is for. Sometimes Eclipse 
can supply the @param and variable name for you, but you must always 
supply what the variable is for. Do this even if you think it is 
obvious. It is part of being a good programmer.</p>
<p>Use @return to describe the value that the method returns. Don't give
 the name 
  of the variable being returned. Just explain what it does. Notice that
 the @return above does not mention the variable, minimum. It just tells
 that the value returned is the smaller of the two parameters.</p>
<p>&nbsp;</p>
<p>We will talk more about javadoc notation and the reason for using it when we 
  talk about classes.</p>
<p>&nbsp;</p>
<div class="endlesson"> 
<p class="endheader">Next</p>
  <p>Let's see how to call and test our method. </p>
  <p>&nbsp;</p>
</div>


</body></html>