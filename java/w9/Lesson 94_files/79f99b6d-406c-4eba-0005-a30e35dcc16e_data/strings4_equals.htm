<html><head>
<title>Strings10 - methods</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;
   
   
   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
.box
{
    border: thin black solid;
	padding: 2px 10px 2px 10px;
	
}
-->
</style>
</head>

<body text="#000000" bgcolor="#FFFFFF">

<h1 align="center">String Equality</h1>

<p>&nbsp;</p>
<p>Sometimes we want to know if two strings are equal. But what does that mean?</p>
<p align="left">&nbsp;</p>
<h2 align="left">What is meant by String equality?</h2>
<p align="left"> When we ask if two strings are equal, we generally mean, "Do 
  the two strings contain the same data, the same characters?" You should 
  <b>NOT</b> use == to test for equality of the String. This tests for equality 
  of the <i>references</i> not the <i>objects</i> themselves. Look at this example:</p>
<pre class="segment">  String s1 = "Java";
  String s2 = new String("Java");
  System.out.print("s1 == s2 is ");
  System.out.println(s1==s2);
</pre>
  
  
<p>&nbsp;</p>
<p>This code segment will print </p>
<p class="dos">s1 == s2 is false</p>
<p align="left"><br>
  This might surprise you. But the == operator tests to see if the reference variables 
  s1 and s2 have the same value - if they refer to the same memory location. They 
  don't.</p>
<p align="left"> 
</p><p>
  If we add this statement:</p>
<p class="segment" align="left">String s4 = s1; </p>
<p align="left">&nbsp;</p>
<p align="left">Now (s1 == s4) is true. The reference variables s1 and s4 contain the same value - they refer 
  to the same memory location.</p>
<p align="left">&nbsp; </p>
<p align="left">Putting the code together and drawing a picture:</p>

<p align="left">&nbsp; </p>
<pre class="segment">  String s1 = "Java";
  String s2 = new String("Java");
  String s4 = s1;</pre>
<p align="left">&nbsp; </p>
<p align="left"><img src="strings4_equals_data/string_equality.gif" alt="string equality" width="520" height="280"></p>
<p align="left">&nbsp; </p>
<p align="left">In this example, <code>s1 == s2</code> is <code>false</code>, 
  while <code>s1 == s4</code> is <code>true</code>.</p>
<p align="left">You should almost never use == with strings (or any objects).</p>
<p align="left">&nbsp;</p>
<h3 align="left">How can we test for equality?</h3>
<p align="left">What we really want to know is whether the string objects themselves 
  are equal not the reference variables. That is, "Do the objects referenced 
  by the variables s1 and s2 contain the same sequence of characters?"</p>
<p align="left">Let's write a method to compare the strings character by character 
  and see. First we ask, "Are the strings the same length?" If not, 
  the strings can not contain the same characters. Next we ask, "Does charAt(0) 
  in s1 = charAt(0) in s2 and so on?"</p>
<p align="left">Here is a static method that tests to see if two strings have the 
  same sequence of characters. (It is static because it receives all necessary 
  data as method parameters.)</p>
<pre class="segment">   public static boolean equalsMethod(String s1, String s2)
   {
      boolean equals = true;

      if (s1.length() != s2.length())
         equals = false;

      int index = 0;
      int last = s1.length() - 1; //index of last char
      while ((index &lt;= last) &amp;&amp; equals)
      {
         if (s1.charAt(index) != s2.charAt(index))
         {
            equals = false;
         }
         index++;
      }

      return equals;
   }</pre>
<p align="left">&nbsp;</p>
<p align="left">Here is an application that uses the static equalsMethod to determine 
  if Strings are equal.</p>
<p align="left">&nbsp;</p>
<h3 align="left">StaticEqualsMethod.java</h3>
<p align="left">&nbsp;</p>
<pre class="code">/**
   An application to use a method that tests two strings for equality
   @author Kathleen O'Brien
*/
public class StaticEqualsMethod
{
   public static void main(String[] args)
   {
      String s1 = "Welcome to Java";
      String s2 = new String("Welcome to Java");

      System.out.println(s1 + " and " + s2 + " are ");
      if (equalsMethod(s1, s2))
         System.out.println("     equal");
      else
         System.out.println("     not equal");

      s2 = "Welcome to PERL";
      System.out.println(s1 + " and " + s2 + " are ");
      if (equalsMethod(s1, s2))
         System.out.println("     equal");
      else
         System.out.println("     not equal");
   }

   /**
      Determines if the two given strings are equal
      @param s1 the first String
      @param s2 the string to compare with the first string
      @return true if the strings are contain the same sequence
         of characters else false
   */
   public static boolean equalsMethod(String s1, String s2)
   {
      boolean equals = true;

      if (s1.length() != s2.length())
         equals = false;

      int index = 0;
      int last = s1.length() - 1; //index of last char
      while ((index &lt;= last) &amp;&amp; equals)
      {
         if (s1.charAt(index) != s2.charAt(index))
         {
            equals = false;
         }
         index++;
      }

      return equals;
   }
}
</pre>
<p align="left">&nbsp;</p>
<p align="left">Here is the output</p>
<h3 align="left">Output</h3>
<pre class="dos">Welcome to Java and Welcome to Java are
     equal
Welcome to Java and Welcome to PERL are
     not equal</pre>
<p align="left">&nbsp;</p>
<h3 align="left">String class equals method</h3>
<p align="left">Because testing for string equality is a common task, the <code>String</code>  class contains an instance method that will test if another string is equal 
  to (has the same character sequence as) this string. </p>
<p align="left">You call the the <code>String</code> class equals method like 
  this:</p>
<p class="segment" align="left">s1.equals(s2)</p>
<p align="left">The equals method returns true if the sequence of characters referenced 
  by s1 is identical to the sequence of characters referenced by s2. </p>
<p align="left">This is an instance method because it operates on the data of the 
  s1 object.</p>
<p align="left">Here is a program that demonstrates the use of the <code>String</code> 
  <code>equals</code> method and shows the difference between == and the equals 
  method.</p>
<p align="left">&nbsp;</p>
<h3 align="left">EqualityTest</h3>
<p align="left">&nbsp;</p>
<pre class="code">/**
   Demonstrate difference between == and equals method
   @author Kathleen O'Brien
*/
public class EqualityTest
{
   public static void main(String[] args)
   {
      String s1 = "Java";
      String s2 = new String("Java");

      //using == gives false
      System.out.print("s1 == s2 is ");
      System.out.println(s1==s2);

      //using equals method gives true
      System.out.println("s1.equals(s2) is " + s1.equals(s2));
   }
}
</pre>
<p align="left">&nbsp;</p>
<p>Here is the output. </p>
<h3>Output </h3>
<pre class="dos">s1 == s2 is false
s1.equals(s2) is true</pre>
<p align="left">&nbsp;</p>
<p align="left">&nbsp;</p>
<div class="endlesson">
<p class="endheader">Next</p>
  <p>We have mentioned that Strings are immutable. Next we will see exactly what 
    that means.</p>
  <p>&nbsp;</p>
</div>



</body></html>