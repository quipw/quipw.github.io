<html><head>
<title>Passing an Array</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;

   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
-->
</style>
</head>

<body text="#000000" bgcolor="#FFFFFF">

<h1>Passing an Array</h1>
<p>&nbsp;</p>
<p>We have passed primitive data types (int, double, etc.) to a method. We can 
  also pass an array as a parameter to a method. What we are actually passing 
  is the array reference not the array containing the data itself. We don't pass 
  the actual data in the array, we just tell the method where to find the array 
  using a copy of the array reference variable.</p>
<p>Here is an application that passes an <code>int</code> array to a method called 
  <code>printArray()</code>. The <code>printArray</code> method loops through 
  the array and prints its elements. This same code can be used to print any <code>int</code> 
  array of any size.</p>
<h2>PassingArray</h2>
<pre class="code">/**
   Demonstrates passing an array to a method
   @author Kathleen O&#8217;Brien
   @version 1.1
*/
public class PassingArray
{
   public static void main(String[] args)
   {
      int[] scores = {95, 85, 100, 80, 93};

      printArray(scores);

   }//end main method

   /**
      prints an array
      @param list the array to print
   */
   public static void printArray(int[] list)
   {
      for (int i = 0; i &lt; list.length; i++)
      {
         System.out.print(list[i] + " ");
      }
   System.out.println();
   }
}//end class
</pre>
<p>&nbsp;</p>
<p>Notice that the method is static. Normally we would call it using the class 
  name PassingArray.printArray(), but because the printArray method is in the same 
  class as the code calling the method, that is not necessary. Java will look 
  in the current class for the methods it needs.</p>
<p>One of the reasons we write methods is so that we can reuse the code. We can 
  call the <code>printArray</code> method from another class when we have need 
  of it. The new class must be in the same folder as <code>PassingArray.class</code></p>
<p>&nbsp;</p>
<h2>UsePassingArray</h2>
<pre class="code">/**
   Demonstrates passing an array to a method
   when the method is in a different class
   @author Kathleen O'Brien
   @version 1.1
*/
public class UsePassingArray
{
   public static void main(String[] args)
   {
      int[] myList = {195, 805, 100, 230, 93, 75, 81};

      PassingArray.printArray(myList);

   }//end main method
}//end class
</pre>
<p>&nbsp;</p>
<p>Notice this time we specify the class containing the method as well as the 
  method: <code>PassingArray.printArray(myList);</code></p>
<p>We are passing a copy of the reference to myList. The method can change the 
  array using its copy of the array reference.</p>
<p>Now look at this application in which the method actually  changes the data 
  in the array. Notice the method can not change the <code>int</code> variable 
  <code>param</code>.</p>
<p>&nbsp;</p>
<h2>ChangingPassedArray</h2>
<pre class="code">/**
   Demonstrates changing the elements
   of an array passed to a method
   @author Kathleen O'Brien
   @version 1.1
*/
public class ChangingPassedArray
{
   public static void main(String[] args)
   {
      //declare an initialize an array and a primitive
      int[] scores = {95, 85, 100, 80, 93};
      int param = 10;

      //print the values before calling the method
      System.out.println("Values before calling method:");
      for (int value : scores)
      {
         System.out.print(value + " ");
      }

      System.out.println("\nThe param = " + param);
      System.out.println();

      changeArray(param, scores);

      //print the values after calling the method
      System.out.println("Values after calling method:");
      for (int value : scores)
      {
         System.out.print(value + " ");
      }

      System.out.println("\nThe param = " + param);
      System.out.println();

   }//end main method

   /**
      method that changes the values in the array passed to it
      @param param a primitive value passed
      @param list the array passed
   */
   public static void changeArray(int param, int[] list)
   {
      for (int i = 0; i &lt; list.length; i++)
      {
         list[i] = list[i] + 10;
      }

      param = param + 100;
   }
}//end class
</pre>
<p>&nbsp;</p>
<p>Here is the output. The values in the array have changed. The value of <code>param</code> 
  has not</p>
<pre class="dos">Values before calling method:
95 85 100 80 93
The param = 10

Values after calling method:
105 95 110 90 103
The param = 10</pre>
<p>&nbsp;</p>
<div class="endlesson">
<p class="endheader">Next</p>
  <p>Next is sorting and searching an array.</p>
</div>


</body></html>