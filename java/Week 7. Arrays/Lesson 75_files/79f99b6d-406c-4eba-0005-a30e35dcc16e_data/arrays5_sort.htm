<html><head>
<title>Sorting and Searching</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;

   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
-->
</style>
</head>

<body text="#000000" bgcolor="#FFFFFF">
<h1>Sorting and Searching</h1>
<p>&nbsp;</p>
<h2>Sorting</h2>
<p>Sorting is a very common activity with arrays. There are many different kinds 
  of sorts. Some are more efficient than others. You will learn more about the 
  relative speeds of algorithms for sorting in CIS27C. For now, we are going to 
  look at a selection sort that will put the values in the array in ascending order. It is a simple 
  sort and relatively fast.</p>
<p>&nbsp;</p>
<p>The technique requires using a for loop to traverse an array many times. In 
  each pass we put the largest remaining element at the bottom of the array. The 
  first pass puts the largest element at the bottom. The next pass puts the next 
  largest element in the next to the bottom slot. The third pass puts the third 
  largest element third from the bottom. And so on. We put the largest element 
  at the bottom by exchanging it with the element that is there.</p>
<p>Assume we have the following numbers in an array. The elements before the pipe 
  ( <b>|</b> ) are the ones we still need to sort.</p>
<p>5 1 4 7 9 3 2<b>|</b></p>
<p>After the first pass, the array will look like this:</p>
<p>5 1 4 7 2 3<b> | </b>9</p>
<p>We are done with the numbers after the pipe (the <b>|</b>). They are in proper 
  order. We won't look at them any more.</p>
<p>After the second pass:</p>
<p>5 1 4 3 2 <b>|</b> 7 9</p>
<p>After the third pass</p>
<p>2 1 4 3 <b>|</b> 5 7 9</p>
<p>After the fourth pass:</p>
<p>2 1 3 <b>|</b> 4 5 7 9 </p>
<p>On the fifth pass, the 3 is already in the correct place so the array doesn't 
  change.</p>
<p>2 1 <b>|</b> 3 4 5 7 9 </p>
<p>After the sixth pass, the array is sorted:</p>
<p>1 2 3 4 5 7 9</p>
<p>We need 6 passes to sort an array of 7 elements.</p>
<p>Here is Dr. Liang's selectionSort method in a class also called SelectionSort. 
  This is an example of a method that takes an array reference as a parameter 
  and changes the data in the array. The application also includes a method to 
  print the data in an array of doubles.</p>
<p>&nbsp;</p>
<h3>SelectionSort</h3>
<pre class="code">public class SelectionSort {
  /** Main method */
  public static void main(String[] args) {
    // Initialize the list
    double[] myList = {5.0, 4.4, 1.9, 2.9, 3.4, 3.5};

    // Print the original list
    System.out.println("My list before sort is: ");
    printList(myList);

    // Sort the list
    selectionSort(myList);

    // Print the sorted list
    System.out.println();
    System.out.println("My list after sort is: ");
    printList(myList);
  }

  /** The method for printing numbers */
  static void printList(double[] list) {
    for (int i = 0; i &lt; list.length; i++)
      System.out.print(list[i] + "  ");
    System.out.println();
  }

  /** The method for sorting the numbers */
  static void selectionSort(double[] list) {
    for (int i = list.length - 1; i &gt;= 1; i--) {
      // Find the maximum in the list[0..i]
      double currentMax = list[0];
      int currentMaxIndex = 0;

      for (int j = 1; j &lt;= i; j++) {
        if (currentMax &lt; list[j]) {
          currentMax = list[j];
          currentMaxIndex = j;
        }
      }

      // Swap list[i] with list[currentMaxIndex] if necessary;
      if (currentMaxIndex != i) {
        list[currentMaxIndex] = list[i];
        list[i] = currentMax;
      }
    }
  }
}
</pre>
<p>&nbsp;</p>
<p>Now that the method has been written we can reuse it to sort any array of doubles. 
  Here is another application that uses the selectionSort method. We have to specify 
  that it is in the SelectionSort class (<code>SelectionSort.selectionSort();</code>). 
  We also reuse <code>SelectionSort.printList()</code> method to print the array 
  elements.</p>
<p>&nbsp;</p>
<h3>UseSelectionSort</h3>
<pre class="code">/**
   Use selectionSort method from another class
   @author Kathleen O'Brien
*/

public class UseSelectionSort
{
  public static void main(String[] args)
  {
     // Initialize the list
     double[] myList = {9.2, 4.5, 1.9, 1.9, 3.5, 4.6, 8.2, 7.6};

     // Print the original list
     System.out.println("My list before sort is: ");
     SelectionSort.printList(myList);

     // Sort the list
     SelectionSort.selectionSort(myList);

     // Print the sorted list
     System.out.println();
     System.out.println("My list after sort is: ");
     SelectionSort.printList(myList);
  }
}</pre>
<p>&nbsp;</p>
<h2>Searching</h2>
<p>Another common task is searching an array for a particular value, called the 
  target. </p>
<p>We can start at the top of the array and check each element one after the other 
  to see if any are equal to the target. This is called a linear search.</p>
<p>Here is my method to do a linear search. I don't like Dr. Liang's method. It 
  is not generally considered good structured programming to return from the middle 
  of a for loop in a method.</p>
<h3>LinearSearch</h3>
<pre class="code">/**
   Search for a number in an array
   @author Dr Liang
   modified by Kathleen O'Brien
*/
public class LinearSearch {
  /** Main method */
  public static void main(String[] args) {
    int[] list = {1, 4, 4, 2, 5, -3, 6, 2};
    int i = linearSearch(list, 4);  // returns 2
    int j = linearSearch(list, -4); // returns -1
    int k = linearSearch(list, -3); // returns 5

    System.out.println(i);
    System.out.println(j);
    System.out.println(k);
  }

  /**
     The method for finding a target in the list
     @param list the array to search
     @param target the value to search for
     @return the index of the target if found
        otherwise returns -1
  */
  public static int linearSearch(int[] list, int target) {
    int returnValue = -1;
    for (int i = 0; i &lt; list.length; i++)
      if (target == list[i])
        returnValue = i;
    return returnValue;
  }
}</pre>
<p>&nbsp;</p>
<p>Once again we can write an application that reuses the method - this time the 
  search method.</p>
<h3>UseLinearSearch</h3>
<pre class="code">/**
   An application to use linearSearch method
   to search for a number in an array
   @author Kathleen O'Brien
*/
public class UseLinearSearch {

  public static void main(String[] args) {

    //the array to search
    int[] myArray = {59, 4, 4, 27, 25, -3, 6, 20};

    //search the array
    System.out.println(LinearSearch.linearSearch(myArray, 27));
    System.out.println();

    //use a method to simplify testing of search
    searchAndPrint(myArray, 25);
    searchAndPrint(myArray, 4);
    searchAndPrint(myArray, -3);
    searchAndPrint(myArray, 31);
  }

  /**
     Print the index of the search target
     @param list the array to search
     @param target, the number to search for
     @return the index of the target or -1 if
        target does not exist in the array
  */
     public static void searchAndPrint(int[] list, int target)
     {
         // search the array
         int index = LinearSearch.linearSearch(list, target);

         if (index &gt;= 0)   //target found
         {
            System.out.println(target + " found at index " + index);
         }
         else
           System.out.println(target + " not found in the array");
     }
}</pre>
<p>&nbsp;</p>
<p>Here is the output.</p>
<h3>Output</h3>
<pre class="dos">3

25 found at index 4
4 found at index 2
-3 found at index 5
31 not found in the array</pre>
<p>&nbsp;</p>
<div class="endlesson">
  <p class="endheader">Finishing Up</p>
  <p>That's it for arrays. If you continue to study programming, you will have 
    many occasions to use this construct.</p>
  <p>Be sure to do your post.</p>
  <p>Return to this Module's Things to Do and complete the work for this lesson.</p>
</div>


</body></html>