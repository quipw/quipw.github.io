<html><head>
<title>Strings10 - Intro</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;
   
   
   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
.box
{
    border: thin black solid;
	padding: 2px 10px 2px 10px;
	
}
-->
</style>
</head>

<body text="#000000" bgcolor="#FFFFFF">

<h1 align="center">Introduction</h1>

<p>Most programming languages have strings. You have been using strings all quarter. 
  Now it is time to look at strings formally.</p>
<h2>Definition </h2>
<p align="left">A string is a sequence of characters. In Java the sequence of 
  characters is enclosed in double quotes: "Hello".</p>
<p align="left">&nbsp;</p>
<p align="left">In this statement:</p>
<p class="segment" align="left">System.out.println("Enter a score");</p>
<p align="left">"Enter a score" is a string literal.</p>
<p align="left">In Java, strings are objects. There is a class named <code>String</code> 
  located in java.lang package. (There is no need to import classes from java.lang.) 
  Things like <code>"Hello, Java Lover"</code> are objects of the String 
  class. </p>
<h3 align="left">&nbsp;</h3>
<h2 align="left">Creating Strings</h2>
<p align="left">We have already seen how to create a <code>String</code> object 
  reference variable and assign a <code>String</code> object to it. But let's 
  review.</p>
<pre class="segment">String input; //creates a String object reference
input = JOptionPane.showInputDialog("Enter a Score"); //assigns a String to the reference</pre>
<p align="left">&nbsp;</p>
<p align="left">Here is another example. We are creating a String literal <code>"Hello"</code> 
  and assigning it to the String reference variable <code>message</code>.</p>
<p class="segment" align="left">String message = "Hello ";</p>
<p align="left">&nbsp;</p>
<p align="left">Actually this is just a convenient short cut. We can create a 
  <code>String</code> object with the new operator the same way we create other 
  objects.</p>
<p class="segment" align="left">String message = new String("Hello ");</p>
<p align="left">But this would be tedious, so the kind people at Sun Microsystems 
  provided the alternate means.</p>
<p align="left">&nbsp;</p>

<h2 align="left">Accessing Characters</h2>
<p align="left">The characters in a string are numbered much like the cells of 
  an array, starting with 0. Look at this String:</p>
<p class="segment" align="left">String city = "Cupertino";</p>
<p>&nbsp;</p>
<p>The characters are numbered thus:</p>
<table width="30%" border="1" cellpadding="10">
  <tbody><tr>
    <td>C</td>
    <td>u</td>
    <td>p</td>
    <td>e</td>
    <td>r</td>
    <td>t</td>
    <td>i</td>
    <td>n</td>
    <td>o</td>
  </tr>
  <tr>
    <td>0</td>
    <td>1</td>
    <td>2</td>
    <td>3</td>
    <td>4</td>
    <td>5</td>
    <td>6</td>
    <td>7</td>
    <td>8</td>
  </tr>
</tbody></table>
<p align="left">&nbsp;</p>
<p align="left">We use the method <code>charAt</code> to access a particular character. 
</p>
<p align="left"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>city. 
  charAt(0)</code> </p>
<p align="left">is 'C'.</p>
<p align="left">And</p>
<p align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>city.charAt(7) </code></p>
<p align="left">is 'n'.</p>
<p align="left">If you try to access a character at an index beyond the end of 
  the String, the Java Virtual Machine will throw a StringIndexOutOfBoundsException.</p>
<p class="segment" align="left">city.charAt(15); &nbsp;&nbsp;&nbsp;&nbsp;//error 
</p>
<p align="left">&nbsp;</p>
<h2 align="left">Length of a String</h2>
<p align="left">There is a method in the String class that will give us the length 
  of a string. Reasonably enough it is called length(). To get the length of the 
  String city:</p>
<p class="segment" align="left">city.length();</p>
<p align="left">The value returned when city is "Cupertino" is 9.</p>
<p align="left">&nbsp;</p>
<p align="left">Notice that we get the length of a <code>String</code> with the 
  <code>length()</code> method. We get the length of an array with its length 
  property (no parentheses): </p>
<p class="segment" align="left">arrayName.length;</p>
<p align="left">&nbsp;</p>
<p align="left">The last character of a string is at length() - 1. So the character 
  at city.length() -1 is the last character, 'o'.</p>
<p align="left">Here is an application to print each character of a String on 
  a separate line.</p>
<p align="left">&nbsp;</p>
  
<h3>CharAtDemo </h3>
<pre class="code">import java.util.Scanner;
/**
 * An application to demonstrate charAt and string indexing
 * @author Kathleen O'Brien
*/

public class CharAtDemo
{
   public static void main(String[] args)
   {
        //make a Scanner
        Scanner console = new Scanner(System.in);

        //get input
        System.out.print("Enter a String: ");
        String myString = console.nextLine();

        //print one character on each line
        System.out.println("The characters you entered were:");

        for (int index = 0; index &lt; myString.length(); index++)
        {
          System.out.println(myString.charAt(index));
        }
   }
}</pre>
<p align="left">&nbsp;</p>
<h3 align="left">Output</h3>
<pre class="dos">Enter a String: Foothill
The characters you entered were:
F
o
o
t
h
i
l
l</pre>
<p align="left">&nbsp;</p>
<h3 align="left">Try It Yourself</h3>
<p align="left">Given the statement <code>String city = "Cupertino";</code></p>
<p align="left">What is city.charAt(5)? 
  <select>
    <option selected="selected">answer</option>
    <option> &nbsp;t</option>
  </select>
</p>
<p align="left">How would you access the character 'p'?
<select>
<option selected="selected">answer</option>
<option>city.charAt(2)</option>
</select>
</p>
<p align="left">How would you access the last character?
<select>
<option selected="selected">answer</option>
<option>city.charAt(city.length() - 1)</option>
</select>
</p>
<p align="left">Given <code>String greeting = "Welcome";</code> what is greeting.length()? 
  <select>
<option selected="selected">answer</option>
<option>7</option>
</select>
</p>
<p align="left">&nbsp;</p>
<h2 align="left">Concatenating Strings</h2>
<p align="left">Concatenate means "to connect in a series or chain." 
  You have used String concatenation all quarter. We use the + operator to concatenate 
  strings, to join the two strings together.</p>
<p class="segment" align="left">String name = "There";<br>
  String greeting = message + name;</p>
<p align="left">&nbsp;</p>
<p align="left">We can also concatenate numbers and other things to a string. 
  Whenever you use + operator and one of the operands is a string, the other is 
  converted to a string. In this example</p>
<p class="segment" align="left">String message = "The answer is ";<br>
  int value = 42;<br>
  String newMessage = message + value;<br>
  System.out.println(newMessage);</p>

<p align="left">The int value 42 is converted to a string and joined to the end 
  of the String message. The output is:</p>
<p class="dos" align="left">The answer is 42</p>
<p align="left">&nbsp;</p>
<p align="left">The expression <code>message + value</code> returns a new <code>String</code>. 
  The original <code>String</code> message is not changed. </p>
<p align="left">&nbsp;</p>
<div class="endlesson">
<p class="endheader">Next</p>
  <p>The <code>String</code> class contains many methods. We will look at the 
    most important in the next few sections.</p>
  <p>&nbsp;</p>
</div>



</body></html>