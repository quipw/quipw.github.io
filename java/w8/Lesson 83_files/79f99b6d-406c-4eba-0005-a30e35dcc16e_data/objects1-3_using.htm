<html lang="en"><head>
<title>Objects - how to use</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;
   
   
   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
-->
</style>

</head>

<body text="#000000" bgcolor="#FFFFFF">

    
  


<h1>Using Objects</h1>
<p>&nbsp;</p><h2>How to Use an Object</h2>
<p>Objects have behaviors called methods. We invoke a method from an object (an 
  instance of the class). After we have created a <code>Scanner</code> object 
  and assigned it to a <code>Scanner</code> reference variable, <code>console</code>, 
  we can invoke its methods like this: </p>
<p class="segment">console.nextInt();</p>
<p>&nbsp;</p>
<p>After creating an instance of <code>Random</code> class and assigning it to 
  a <code>Random</code> reference variable, generator. We can call its methods. 
  For example </p>
<p class="segment">generator.nextInt(100);</p>
<p>This uses the object referenced by <code>generator</code> to get the next 
  random <code>int</code> less than 100.</p>
<p>&nbsp;</p>
<p>If the <code>Car</code> class has a drive method and <code>myHonda</code> 
  is a reference to a <code>Car</code> object. We can say </p>
<p class="segment">myHonda.drive();</p>
<p><br>
  This causes the code in the <code>drive()</code> method of the <code>myHonda</code> 
  object to execute.</p>
<p>&nbsp;</p>
<p><code>console</code>, <code>generator</code>, and <code>myHonda</code> are 
  called implicit parameters of the methods. The implicit parameter is the object 
  upon which the method is invoked. <code>myHonda.drive()</code> invokes the drive 
  method on <code>myHonda</code>, not <code>yourFord</code>.</p>
<p>&nbsp;</p>
<h3>Using the out object</h3>
<p>We used an object in our very first program. This statement</p>
<p class="segment">System.out.println("Welcome to Java");</p>
<p>contains an object - <code>out</code><tt>. </tt><code>out</code> is an instance 
  (an object) of the <code>PrintStream</code> class. The object is located in 
  the <code>System</code> class. So its full name is <code>System.out</code>. 
  Look at <code>println</code>. <code>println</code> is a method of the <code>PrintStream</code> 
  class. Every <code>PrintStream</code> object has a method (behavior) <code>println</code>. 
  The string <code>"Welcome to Java"</code> is the parameter (extra 
  data) of the <code>println</code> method. </p>
<p><code>System.out</code> is the implicit parameter of the println method in 
  this statement. The implicit parameter is the particular object upon which the 
  method is invoked.</p>
<p>&nbsp;</p>
<h3>Using a Rectangle object</h3>
<p>Now let's create a <code>Rectangle</code> object (and save the reference to 
  it in a <code>Rectangle</code> object variable).</p>
<p class="segment">//this creates the object variable<br>
Rectangle book; <br>
//creates new Rectangle and saves the reference in book. <br>
book = new Rectangle(0, 0, 100, 50); </p>
<p>This is not a real-life rectangle. It is a description of a rectangle in a 
  coordinate system. The <code>Rectangle</code> has an upper left-hand corner 
  of (0, 0). It has a width of 100 and a height of 50.</p>
<p>What kind of behaviors (methods) does a <code>Rectangle</code> object have? 
  How can you find out? Someone can tell you. I'm going to tell you about the 
  <code>contains</code> method. You can also look at the on-line documentation 
  (the API - for Application Program Interface). <a href="http://java.sun.com/javase/6/docs/api/">See 
  the API</a>. A lot of this won't make sense yet, but start looking at it. Find 
  <code>Rectangle</code> in the list of classes in the left frame, and click on 
  it. Scroll down to Method Summary, and you will see a list of methods that you 
  can use with a <code>Rectangle</code>. Here is the description of the <code>contains</code> 
  method.</p>
<p>&nbsp;</p>
<table summary="A table containing information on Rectangle's contains method" width="73%" align="center" border="2">
  <caption>Rectangle contains Method</caption>
  <tbody><tr>
    <th>Return Type</th>
    <th>Method Description</th>
  </tr>
  <tr>
    <td width="27%"> boolean</td>
    <td width="73%"> 
      <p>contains(int x, int y) <br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether or 
        not this Rectangle contains the point at the specified location (x, y). 
      </p>
      </td>
  </tr>
</tbody></table>
<p>&nbsp;</p><p align="left"><br>
  This method returns <code>true</code> or <code>false</code> depending on whether 
  or not the point specified by (x, y) is contained inside the <code>Rectangle</code>. 
  So</p>
<p class="segment">book.contains(50, 25); </p>
<p>will return <code>true</code>. And</p>
<p class="segment">System.out.println(book.contains(50, 25) );</p>
<p>will print the word <code>true</code><tt>. </tt></p>
<p>&nbsp;</p>
<h3>Test Yourself</h3>
<p>In the statement </p>
<p> <span class="segment">book.contains(50, 25);</span> </p>
<p>&nbsp;</p>
<p>What is <code>book</code>? - 
  <select name="select">
    <option selected="selected">answer</option>
    <option>an REFERENCE VARIABLE of type Rectangle. It references a Rectangle object. </option>
  </select>
</p>
<p>&nbsp;</p>
<p align="left">What is <code>contains</code>? - 
  <select name="select2">
  <option selected="selected">answer</option>
  <option>a method in the Rectangle class. Any Rectangle can tell you whether it contains a specific point.</option>
  </select>
</p>
<p align="left">&nbsp;</p>
<p>What are 50 and 25? - 
  <select name="select3">
  <option selected="selected">answer</option>
  <option>the method parameters.</option>
  </select>
</p>
<p> <br>
</p>

  <p>&nbsp;</p>
  <div class="endlesson"> 
  <span class="endheader">Next</span> 
    <p>Things get exciting at this point. Now we can create our own classes. That's 
      the topic of the next section.</p>
    <p>&nbsp;</p>
  </div>

    



</body></html>