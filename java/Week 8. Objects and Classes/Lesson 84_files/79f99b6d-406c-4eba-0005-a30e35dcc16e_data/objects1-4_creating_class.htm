<html lang="en"><head>
<title>Objects - creating a class</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;
   
   
   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
-->
</style>

</head>

<body text="#000000" bgcolor="#FFFFFF">

    
  


<h1>Creating a Class</h1>
<p>&nbsp;</p>
<p>Programmers can wear one of two hats</p>
<ul>
  <li> Class designer - Creates new classes</li>
  <li> Application programmer - Uses the existing classes<br>
  </li>
</ul>
<p>People at Sun MicroSystems who wrote the classes in the Java libraries are 
  class designers They designed classes like <code>Scanner</code>, <code>Random</code>, 
  and <code>Math</code>. When you use those classes in your applications, you 
  are the application programmer. Remember that an application has a main method.<br>
</p>
<p>"Application programmer" is a term that is widely used. Application 
  programmers write programs that do something - that a user can interact with 
  to accomplish a task. Microsoft Word is an application program. Every time you 
  have written a class with a main method you have created an application. </p>
<p>"Class Designer" is a word I am using to help you see the difference 
  in the two kinds of programming activities. </p>
<p>Often a programmer will wear both of these hats - designing his/her own classes 
  and then writing an application that uses the classes.</p>
<h2><br>
  Designing a Class</h2>
<p>Let's talk about being the class designer. What do we need to do to write 
  a class? We need to define </p>
<ul>
  <li>data (properties) that the class will have</li>
  <li>behaviors (methods) the class can do</li>
  <li>something called a constructor which is called when the <code>new</code> 
    keyword is used</li>
</ul>
<p>&nbsp;</p>
<h2>Circle Class</h2>
<p>Let's write a Circle class - it represents a Circle in geometry. Look at this 
  example rather than the one in the text. They are similar, but this version 
  does things correctly from the start rather than using poor techniques at first 
  and later switching to good programming style.</p>
<p> A Circle has a property (characteristic) - what would that be? 
  <select name="select">
    <option selected="selected">Click to see answer</option>
    <option>radius</option>
  </select>
</p>
<p>What should the data type be? Let's make it a <code>double</code>.</p>
<p> What behavior does a <code>Circle</code> have? That is: what operations do 
  you want to be performed on the data (radius)? 
  <select name="select">
    <option selected="selected">Click to see answers</option>
    <option>get the area</option>
    <option>get the circumference</option>
  </select>
</p>
<p>We also want to be able to find out the radius of a Circle object and set 
  a new radius.</p>

  
<p>Our class will also need something called a constructor that is invoked when 
  the <code>new</code> operator is used to create a <code>Circle</code> object.</p>
  <p>Here is UML diagram of our <code>Circle</code> class.</p>
  <p align="center"><img src="objects1-4_creating_class_data/circle_uml.gif" alt="UML for Circle class" width="576" height="336"></p>
  
<p align="left">&nbsp;</p>
<h3 align="left">Interpreting the UML</h3>
<p align="left"> In the first box is the name of the class, Circle</p>
<p align="left">In the next box the instance variables of the class are listed. 
  In this case, the class will have a instance variable, radius.</p>
<p align="left">The third box contains constructors and methods. The first two 
  constructors; the next four are methods.</p>
<p align="left">The minus ( - ) means the member is private. The ( + ) means it 
  is public.We will talk more about all of this as we go along.</p>
<p align="left">&nbsp;</p>
<h3 align="left">javadoc Documentation and Class Header</h3>
  
<p>Let's start writing our class with the javadoc documentation for the class 
  and the class header. You provide a javadoc description for this class just 
  like for the classes you have been writing all quarter.<br>
  </p>
  <p>Documentation is vital in programming. Always document your code.</p>
  <pre class="segment">/**
   This class describes a circle
   @author Kathleen O'Brien
*/
public class Circle
{
</pre>
  <p>&nbsp;
  </p><h3>Add the Property - the Instance Variable</h3>
  <p>Instance variables are also called instance fields.
  </p><p>Every object of the Circle class will have its own copy of the instance variable, 
    radius.
  
</p><p>Instance variables should always be private. I'll take off points if the instance 
  variables are not declared private. A private variable can not be accessed directly 
  from outside the class.</p>
  
<p>Some programmers put the instance variables at the top of the class. Some put 
  them at the bottom. You will see both as you look at other people's code. Pick 
  either location. But put all the instance fields together, and be sure they 
  are private.</p>
  <pre class="segment">/**
 * This class describes a circle
 * @author Kathleen O'Brien
 */
 public class Circle
 {
      private double radius; 
  </pre>
  <p>&nbsp;
  </p><h3>Add default constructor</h3>
  
<p>A default constructor takes no parameters. The job of any constructor is to 
  initialize the instance fields. So the default constructor needs to set default 
  values for the fields. A constructor always has the same name as the class and 
  no return type. We also need to document the constructor. Note the <tt>{ }</tt> 
  (curly braces) that encloses the constructor body. Dr Liang calls the default 
  constructor the "no-arg" constructor. The two terms mean the same 
  thing. "Default constructor" is more commonly used in Java and is 
  what I will use.</p>
  
<p>Notice that a constructor has no return type. It returns a reference to the 
  object created.</p>
  <pre class="segment">/**
 * This Class describes a circle
 * @author Kathleen O'Brien
 *
 */
public class Circle 
{
    private double radius;
	
    /**
     * Constructs a default Circle with a radius of 0
    */
    public Circle()
    {
        radius = 0;
    }
	</pre>  <p>&nbsp;
  </p><h3>Add Constructor with Parameters</h3>
  
<p>We need a constructor that takes the radius as a parameter. It will also be 
  called <code>Circle</code>. Every constructor has the same name as the class. 
  Notice how we document the parameter with @param tag. this is a new tag and 
  should be used to tell what the parameters to the method or constructor are 
  and what their values should be. </p>
  <pre class="segment">/**
 * This Class describes a circle
 * @author Kathleen O'Brien
 *
 */
public class Circle 
{
    private double radius;
	
    /**
     * Constructs a default Circle with a radius of 0
    */
    public Circle()
    {
        radius = 0;
    }
	
    /**
     * Constructs a Circle with the specified radius
     * @param theRadius the radius of this Circle
     */
    public Circle(double theRadius)
    {
        radius = theRadius;
    }</pre>
<p>&nbsp;
  </p><p>Dr. Liang says a constructor is a special type of method. Other authors say that 
    it is not a method. It is not a point that makes much difference. Everyone 
    agrees that a constructor has the same name as the class and has no return 
    type.
  </p><p>&nbsp;
  </p><h3>Add Some Behaviors (Accessor and Mutator)</h3>
  
<p>Methods that return the value of the instance fields are called <b>accessor</b> 
  methods. These should be public. A public method can be access by any other 
  class. This is the standard: private data and public methods to access the data. 
  This is the principle of encapsulation and protects the class' data from being 
  invalid. 
</p><p>Again notice the documentation. The @return tag documents the return value 
    of the method. Note the <tt>{ }</tt> (curly braces) that encloses the method 
    body. Also notice the return type in the method headers (<code>double</code> 
    for <code>radius</code>)
  </p><h4>Let's add an accessor method for the radius  </h4>
<pre class="segment">/**
 * This Class describes a circle
 * @author Kathleen O'Brien
 *
 */
public class Circle 
{
    private double radius;
	
    /**
     * Constructs a default Circle with a radius of 0
     */
    public Circle()
    {
        radius = 0;
    }
	
    /**
     * Constructs a Circle with the specified radius
     * @param theRadius the radius of this Circle
     */
    public Circle(double theRadius)
    {
        radius = theRadius;
    }
	
    /**
     * Gets the radius for this Circle
     * @return the radius of this Circle
     */
    public double getRadius() 
    {
        return radius;
    }</pre>
  <p>&nbsp;
  </p><p>Methods that change the instance fields are called <b>mutator</b> methods. 
    Provide mutator methods if you want the user of your class to be able to change 
    the data of the class.
  </p><p>Notice that we again use an @param tag in the documentation to explain what 
    value needs to be passed to the method. 
  </p><h4>Let's add a mutator method for radius</h4>
<pre class="segment">/**
 * This Class describes a circle
 * @author Kathleen O'Brien
 *
 */
public class Circle
{
    private double radius;

    /**
     * Constructs a default Circle with a radius of 0
     */
    public Circle()
    {
        radius = 0;
    }

    /**
     * Constructs a Circle with the specified radius
     * @param theRadius the radius of this Circle
     */
    public Circle(double theRadius)
    {
        radius = theRadius;
    }

    /**
     * Gets the radius for this Circle
     * @return the radius of this Circle
     */
    public double getRadius()
    {
        return radius;
    }

    /**
     * Sets a new radius for this Circle
     * @param newRadius the new radius for this Circle
     */
    public void setRadius(double newRadius)
    {
        radius = newRadius;
    }

	</pre>
  <p>&nbsp;
  </p><h3>More Behaviors </h3>
  <p>The purpose of making a Circle class was so that we could have a Circle object 
    that could calculate its area and circumference. We will add those methods 
    and our class will be complete. 
  
</p><p>Notice that these methods do not take parameters. They act on the instance data 
  of the particular Circle object. 
</p><h4>The complete class
</h4>
<pre class="code">/**
 * This Class describes a circle
 * @author Kathleen O'Brien
 *
 */
public class Circle
{
    private double radius;

    /**
     * Constructs a default Circle with a radius of 0
     */
    public Circle()
    {
        radius = 0;
    }

    /**
     * Constructs a Circle with the specified radius
     * @param theRadius the radius of this Circle
     */
    public Circle(double theRadius)
    {
        radius = theRadius;
    }

    /**
     * Gets the radius for this Circle
     * @return the radius of this Circle
     */
    public double getRadius()
    {
        return radius;
    }

    /**
     * Sets a new radius for this Circle
     * @param newRadius the new radius for this Circle
     */
    public void setRadius(double newRadius)
    {
        radius = newRadius;
    }

    /**
     * Gets the area of this Circle
     * @return the area of this Circle
     */
    public double area()
    {
        double area = radius * radius * Math.PI;
        return area;
    }
    /**
     * Gets the perimeter of this Circle
     * @return the circumference of this Circle
     */
    public double circumference()
    {
        double circumference = 2 * Math.PI * radius;
        return circumference;
    }
}</pre>

  <p>&nbsp;
  </p><h3>A Word about javadoc</h3>
  <p>We have been using the javadoc style notation to document our code. You should 
    always document what your code and methods are doing. Using this particular 
    style has an added advantage. It can produce user documentation for you. Programmers 
    are notoriously bad about providing user documentation. The idea with using 
    the javadoc style notation is that the code and the documentation are included 
    in the same file. After our class is written, we can use a utility program 
    called javadoc to produce nifty HTML documentation that we could give to our 
    customer. The customer doesn't need to know how we coded the class, he just 
    needs to know how to create a Circle and call its methods to calculate area 
    and circumference.
  </p><p>In Eclipse, go to Project &gt; Generate Javadoc
  
</p><p>Click Configure... and navigate to where the javadoc utility is stored. It 
  should be something like this: C:\Program Files\Java\jdkxxxx\bin\javadoc.exe. 
  Select your Circle project and click finish. This will create a folder called 
  doc in the directory with your Circle project. Navigate to that folder with 
  Windows Explorer and double click on index.html. You will see the documentation 
  for the class. The information you specified between /** and */ and using the 
  @param and @return tags has been neatly formatted for you. 
</p><p><a href="http://www.fgamedia.org/faculty/kobrien/27a-ng/lessons/lesson8/doc/index.html" target="_blank">Your documentation should look like 
    this.</a> (Opens in a new window.)
  </p><p>&nbsp; 
  </p><div class="endlesson"> <span class="endheader">Next</span> 
    
  <p>Now we have a class. What can we do with it? Will it execute? No. We have 
    to write an application with a main method to instantiate Circle objects and 
    call their methods. That is the next section.</p>
</div>


</body></html>