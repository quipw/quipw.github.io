<html><head>
<title>Loops - while</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;

   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
-->
</style>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<h1 align="center">while and do/while</h1>
<p align="center">&nbsp;</p>

<h2 align="left">while</h2>
<p align="left">Often we don't know how many times we want to execute a loop. 
  We want to execute the loop as long as a condition is true, as in this example.</p>
<pre class="segment">while (sun is shining)

   lie on the beach;
</pre>
<p align="left">As long as the sun is shining we keep lying on the beach (I hope 
  you put on plenty of sunscreen.) As soon as the sun stops shining for whatever 
  reason (It starts to rain; it gets dark), we stop lying on the beach. If it 
  is raining when we get to the beach, we will check to see if the sun is shining. 
  It is not, so we never lie on the beach at all.</p>
<p align="left">&nbsp;</p>
<p align="left">A while loop has the syntax</p>
<pre class="segment">while (condition)
{
   statements;
}</pre>
<p align="left">where (condition) is a boolean expression.</p>
<p align="left">You can have a whole block of statements between the braces. Think 
  about eating the food on your plate. As long as the plate is not empty, you 
  keep eating. Eating is composed of several steps.</p>
<pre class="segment">while (plate not empty)
{
   put food on the fork
   put food in mouth
   chew
   swallow
}
</pre>
<p align="left">As soon as the plate is empty, we stop eating.</p>
<p align="left">&nbsp;</p>
<p align="left">while loops are more versatile than for loops. You can rewrite 
  any for loop as a while loop. We can rewrite the loop for printing numbers and 
  their squares with a while loop.</p>
<pre class="segment">int i = 1;
while ( i &lt;= 10 ) 
{
   System.out.println(i + " squared is " + i * i);
   i++;
}</pre>
<p>&nbsp;</p>
<p>Notice that the loop control variable <code>i</code> is defined outside the 
  loop and incremented at the bottom of the loop. The update (<code>i++</code>) 
  MUST happen. If you forget the update statement, the loop may never terminate. 
  This is called an infinite loop. </p>
<p>We can use a while loop in a situation where we do not know how many time we 
  want to execute the loop. We want to keep executing as long as some condition 
  is true. Perhaps we want to continue asking the user for a score until a negative 
  number is entered.</p>
<p>&nbsp;</p>
<h2>do/while</h2>
<p>A do loop is a variation of the while loop structure. In the case of the do 
  loop, the test condition comes at the bottom of the loop. A do/while loop is 
  not always appropriate. Think about our beach example:</p>
<pre class="segment">do
{
   lie on the beach;
}while (sun is shining);
   </pre>
<p>We will first lie on the beach and then check if the sun is shining. So if 
  it is pouring rain we will lie on the beach and then check to see if the sun 
  is shining. It is not, so we stop lying on the beach. Rather a waste of time 
  in this case.</p>
<p>&nbsp;</p>
<p>But sometimes do/while is a better choice than while. Let's look at a Java 
  example. Suppose we want to keep asking the user for another value until he 
  enters a negative number. Assume we have a Scanner, console. </p>
<pre class="segment">int score = 0;

int sum = 0;
do
{

      sum = sum + score;  
      System.out.print("Enter a score or -1 to quit.  ");
      score = console.nextInt();
}while (score &gt;= 0);</pre>
<p>&nbsp;</p>
<p>The negative value for score is called the sentinel value - the one we are 
  on the look-out for. We could use a sentinel value here because scores can not 
  be less than 0. If we were averaging temperatures, we would need to ask each 
  time if the user wanted to enter another value.</p>
<h3>Notice:</h3>
<p>A do/while loop will always execute at least once since the test is at the 
  end of the loop. A while loop may not execute at all. A while loop is never 
  executed if the boolean expression is false at the beginning of the loop. </p>
<p>&nbsp;</p>
<h2>Infinite Loop</h2>
<p>Occasionally you will make an error in your code and the test condition in 
  the loop will always be true. The loop will execute over and over forever. So 
  how do you stop the program when this happens? In Eclipse, there is a terminate 
  button. It is a little square above the console window to the left of double 
  x's. The square is red when the program is running. Click it to stop the program 
  execution. </p>
<p>&nbsp;</p>
<h2>Try It Yourself</h2>
<p>See if you can write a program to average grades. The user will enter a negative 
  number when he is done. Click here to <a href="http://www.fgamedia.org/faculty/kobrien/27a-ng/lessons/lesson4/dowhilesolution.html">See a solution</a></p>
<h3>&nbsp;</h3>
<h2>Numerical inaccuracy</h2>
<p>Do NOT use floating point numbers for loop control. Floating point numbers 
  are inherently inaccurate because binary numbers can not represent a decimal 
  number exactly. The way floating point numbers must be represented inside the 
  computer (in binary)leads to the inaccuracy. The values are very, very close 
  to the real value but not exact, and that can cause unexpected results when 
  used as loop control.</p>
<p>Look at this example. We want to print values from 0.0 to 1.0 in steps of 0.1.</p>
<p>&nbsp;</p>
<h3>Expected Output</h3>
<p>Here is the expected output:</p>
<p>Values from 0 to 1.0 in steps of 0.1<br>
  0.0<br>
  0.1<br>
  0.2<br>
  0.3<br>
  0.4<br>
  0.5<br>
  0.6<br>
  0.7<br>
  0.8<br>
  0.9<br>
  1.0</p>
<p>Final count: 1.1</p>
<p>&nbsp;</p>
<h3>The Code</h3>
<p>Here is the code:<br>
</p>
<pre class="code">/**
   Demonstrates the reason to avoid floating point
   in for loop
   @author Kathleen O'Brien
   @version 1.0
*/

class BadWhile
{
  public static void main(String[] args)
  {
      float count;
      System.out.println("Values from 0 to 1.0 in steps of 0.1");
      for (count = 0; count &lt;= 1; count += 0.1)
      {
         System.out.println(count + "  ");
      }
      System.out.println("\nFinal count: " + count);
   }
}</pre>
<p>&nbsp;</p>
<h3>Actual Output</h3>
<p>But here is the actual output </p>
<p class="dos">Values from 0 to 1.0 in steps of 0.1<br>
  0.0<br>
  0.1<br>
  0.2<br>
  0.3<br>
  0.4<br>
  0.5<br>
  0.6<br>
  0.70000005<br>
  0.8000001<br>
  0.9000001 <br><br>
Final count: 1.0000001
</p>
<p>&nbsp;</p>
<p>The value of <code>count</code> is off by a tiny bit, but it is enough to make 
  the loop execute one less time than we expect. </p>
<p>This example uses float, but we could come up with examples that use double. 
</p>
<p>&nbsp; </p>
<p>&nbsp;</p>
<table align="center" border="1" cellpadding="20" cellspacing="2" width="83%">
  <tbody><tr>
    <td>
      <h3 align="center">The moral is don't use floating point variables for loop 
        control. </h3>
    </td>
  </tr>
</tbody></table>
<p>&nbsp; </p>
<p>&nbsp; </p>
<div class="endlesson">
  <p class="endheader">Finishing up</p>
  <p>Be sure to do the post for Lesson 4 in the Forum. </p>
  <p>Return to this Module's Things to Do and complete the work for this lesson.</p>
</div>



</body></html>