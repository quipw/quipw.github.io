<html><head>
<title>Data types 4 - data input</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;
   
   
   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
.box
{
    border: thin black solid;
	padding: 2px 10px 2px 10px;
	
}
-->
</style>
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h1 style="font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;

   text-align: center;">Input and Output</h1>
<p align="left">There are two ways we will get input from the user in this course. 
  Both involve using classes from the Java library. That is one of the great thing 
  about an object-oriented language like Java. All sorts of functionality has 
  already been created, and you can easily use it in your program. First we will 
  talk about getting input with JOptionPane and then Scanner.</p>
<h2 align="left">JOptionPane</h2>
<h3 align="left">Input with JOptionPane</h3>
<p align="left">The <code>JOptionPane</code> class is in the library javax.swing. 
  We tell the compiler where to look for the class by using an import statement. 
  Place this at the very top of your program file:</p>
<p class="segment" align="left">import javax.swing.*;</p>
<p align="left"><code>JOptionPane</code> is a class with a static method for showing 
  a dialog box and getting user input. Static method? What does that mean? It 
  means we don't have to create a JOptionPane object in order to use the method. 
  We just tell Java which class contains the method, the name of the method, and 
  any required parameters. In this case, the required parameter is the user prompt. 
</p>
<p align="left">Here is code to ask the user for information and store the information 
  in a String variable.</p>
<p class="segment" align="left">String input = JOptionPane.showInputDialog("What 
  is your name ?");</p>
<p align="left">&nbsp;</p>
<h3 align="left">Converting a String to an int or double</h3>
<p align="left">Often we want to get a number, not a string. We first get the 
  input as a string and then convert the string to an <code>int</code> or <code>double</code> 
  using static methods in Integer or Double classes. To convert to an <code>int,</code> 
  use the static method <code>parseInt</code> from the <code>Integer</code> class. 
</p>
<p class="segment" align="left">String input = JOptionPane.showInputDialog("How many Widgets 
  do you want to order?");<br>
  int quantity = Integer.parseInt(input);</p>
<p align="left">&nbsp;</p>
<p align="left">To convert to a <code>double,</code> use the static method <code>parseDouble</code> 
  from the <code>Double</code> class.</p>
<p class="segment" align="left">String input = JOptionPane.showInputDialog("What 
  is the cost of Widgets today?");<br>
  double price = Double.parseDouble(input);</p>
<p>&nbsp;</p>
<h3>Try It Yourself</h3>
<p>You can select the code above, copy it, and paste it into a program with a 
  main method using your text editor (Notepad, TextPad, Eclipse...). Saves you 
  some typing. Compile and execute it.</p>
<p>Try modifying the code so that it also asks for the user's name.</p>
<p>What happens if you enter "abc" when asked to enter an integer? Do 
  you know why? If not, ask in the Discussion Area.</p>
<h3>Output with JOptionPane</h3>
<p>here is the code to display a message in a dialog box</p>
<p class="segment">JOptionPane.showMessageDialog(null, "The cost is " + price);</p>
<p>What is the <em>null</em> all about? The first parameter is the 
window we want the dialog box to be displayed over. It is the name of 
the parent window. Since we are writing console applications rather than
 graphical ones, there is no parent. The null tells Java not to look for
 a parent.</p>
<h2>Input with Scanner</h2>
<p>The internal workings here won't make a lot of sense until we cover objects. 
  Just know that if you follow the steps, you will be able to get keyboard input 
  simply.</p>
  
<p>Scanner class is located in java.util. So you need this statement at the top 
  of your code:</p>
  <p>
  <span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
import java.util.Scanner;</span></p>
  
<p>&nbsp;</p>
<p>Then in your main method, you create a Scanner object like this:</p>
  <p> 
  <span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
     Scanner console = new Scanner(System.in);</span></p>
  
<p>Just as <code>System.out</code> represents the console window, <code>System.in 
  </code>is an object that represents the keyboard.</p>
<p>&nbsp;</p>
  
<p>Now to read an int:</p>
  <p> 
  <span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
     int age = console.nextInt();</span></p>
  
<p>&nbsp;</p>
<p>To read a double:</p>
  <p>
  <span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
     double cost = console.nextDouble();</span></p>
  
<p>&nbsp;</p>
<p>To read a string:</p>
  <p>
  <span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
     String name = console.nextLine();</span></p>
  
 
<p>&nbsp;
</p><p>Here is a sample program that uses a Scanner to get data from the user. Notice 
  that we use <code>System.out.println</code> to print a prompt to tell the user 
  what to enter. It also uses <code>System.out.println</code> to display the output top the console window.
</p><h2>ScannerTest.java</h2>
<div style="font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;"> 
  <pre>import java.util.Scanner;

/**
   Demonstrates the use of Scanner class
   @author Kathleen O'Brien
*/

public class ScannerTest {
   public static void main(String[] args) {

      //create a scanner object
      Scanner console = new Scanner(System.in);

      /*get full name using nextLine
        nextLine gets the next line - up til user hits enter
      */
      System.out.print("Enter your first and last name: ");
      String name = console.nextLine();

      //get age using nextInt
      System.out.print("Enter your age: ");
      int age = console.nextInt();

      //get GPA using nextDouble
      System.out.print("Enter your GPA: ");
      double gpa = console.nextDouble();

      //print the results
      System.out.println(); //print a blank line
      System.out.println("Your name is " + name);
      System.out.println("Your age is " + age);
      System.out.println("Your GPA is " + gpa);
   }
}
  </pre>
  </div>
<p>&nbsp;</p>
<h2>Output with printf</h2>
<p>You have used System.out.println for output. It doesn't always 
produce pretty, formatted output. Here is code that will print the cost 
of an item and the tax if the tax rate is 8.5%.</p>
<p class="segment"> double cost = 355.90;<br>
//declare variables and constants<br>
final double TAX_RATE = .085;<br>
double tax = cost * TAX_RATE; <br><br>
//unformatted output<br>
System.out.println("COST: " + cost);<br>
System.out.println("TAX : " + tax);</p>
<p>The output will look like this.</p>
<p class="dos">COST: 355.9<br>
TAX : 30.2515</p>
<p>Let's look at formatting the output so that both the cost and the tax
 have exactly 2 decimal places. There are various ways  to format output
 in Java. The easiest for our purposes is to use the the printf method 
of PrintStream class. Remember that System.out is an object of 
PrintStream class so it can call the printf method. Look at the code, 
and then we will talk about it.</p>
<p class="segment"> //formatting to 2 decimals (precision)<br>
System.out.printf("COST:%7.2f%n", cost);<br>
System.out.printf("TAX:%7.2f", tax);</p>
<p>The formatted output will look like this:</p>
<pre class="dos">COST: 355.90
TAX:  30.25</pre>
<p>The first parameter of the printf method is the format string. This 
string specifies how the output is to look. The remaining parameters are
 the values to format.
</p><p>The format string consists of characters that will be printed 
as-is to System.out and a format specifier. These are codes that start 
with a % and end with a letter that specifies the format type. In the 
example above:
</p><p> "COST:%7.2f%n" is the format string. 
</p><p>C,O,S,T,: are simply characters to be printed. 
</p><p>%7.2f and %n are format specifiers.
</p><p>cost is the value to be printed

</p><p>Format specifiers start with %. In %7.2f, the f indicates that 
the format type is floating point. 7 is the width. It tells how many 
characters the value will occupy - including the decimal point. And the 
.2 is the precision. It tells how many decimal places. If the value of 
the number occupies fewer spaces than the width, the field is padded 
with blanks on the left. That is why there is a space between COST: and 
the value.
</p><p>In the format specifier %n, the n indicates the format type is a 
new line - whatever the new line combination is for the operating 
system.
</p><p>There are a number of format types. This table gives the ones you may need
<table border="1" cellpadding="2" width="75%">
  <tbody><tr>
    <th scope="col">Format code</th>
    <th scope="col">Description</th>
    <th scope="col">Value to format</th>
  </tr>
  <tr>
    <td><div align="center">d</div></td>
    <td>decimal integer</td>
    <td>25</td>
  </tr>
  <tr>
    <td><div align="center">x</div></td>
    <td>hexadecimal integer</td>
    <td>3F</td>
  </tr>
  <tr>
    <td><div align="center">f</div></td>
    <td>fixed floating point</td>
    <td>30.25</td>
  </tr>
  <tr>
    <td><div align="center">e</div></td>
    <td>exponential floating point</td>
    <td>1.25e+6</td>
  </tr>
  <tr>
    <td><div align="center">s</div></td>
    <td>String</td>
    <td>inches</td>
  </tr>
  <tr>
    <td><div align="center">n</div></td>
    <td>new line </td>
    <td>&nbsp;</td>
  </tr>
</tbody></table>
</p><p>Here is another example using d, f, and s as format types. We 
make all the fields the same width (10) and line up the numbers under 
labels. The .2 is the precision. (There are 2 decimal places).</p>
<p class="segment"> //using d for integer and f for floating point and s for string<br>
int quantity = 5;<br>
double price = 1.95;<br>
double total = quantity * price;<br>
<br>
System.out.printf("%10s%10s%10s%n", "Quantity", "Price", "Total");<br>
System.out.printf("%10d%10.2f%10.2f%n", quantity, price, total);</p>
<p>And here is the output
</p><pre class="dos">  Quantity     Price     Total
         5      1.95      9.75
</pre>

<p>If you have questions about this, ask in the forum.</p>
<div style="   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;">
<span style="font-family: Georgia, 'Times New Roman', Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;">Finishing Up</span>
  <p>Remember there is a quiz on data types for this lesson.    
  
  </p><p>Return to this Module's Things to Do and complete the work for this lesson.
</p></div>



</body></html>