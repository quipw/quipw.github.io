<html><head>
<title>Data types 1 - basics</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<style type="text/css">
<!--
body
{
     font-family: verdana,arial,helvetica,sans-serif;
     background: white;
     color: black;
}

p,th,td,li,ul,ol {
     font-family: verdana,arial,helvetica,sans-serif;
}
h1 
{  
   font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;
   
   
   text-align: center;
}
h2 
{
   font-family: Georgia, "Times New Roman", Times, serif;
}
caption
{
   font-weight: bold;
}

code
{
     font-size: 105%;
     font-family: "Courier New",Courier,monospace;
     color: navy;
}

.navbar 
{  
   font-family: Arial, Helvetica, sans-serif; 
   font-size: 12px;
   text-align: center;
}
.code
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;     
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #CCCCCC;
     margin:  1em 5em 1em 1em;
}
.segment
{
     font-family: "Courier New", Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;
}
.dos 
{
   font-family: "Courier New", Courier, monospace;
   color: #FFFFFF;
   background-color: #000000;
   width: 75%; 
   padding: 3px 1px 7px 7px;
   font-size: 110%;
; margin: 10px  2em
}
.endlesson 
{
   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;
}
.endheader
{
     font-family: Georgia, "Times New Roman", Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;
}
.box
{
    border: thin black solid;
	padding: 2px 10px 2px 10px;
	
}
-->
</style>
</head>

<body style="font-family: Arial,Helvetica,sans-serif;" bgcolor="#FFFFFF" text="#000000">

<h1 style="font-family: Verdana, Arial, Helvetica, sans-serif; 
   color: navy; 
   padding-top: 15px; 
   padding-bottom: 15px; 
   font-size: 36px;
   border: medium #3300CC solid;

   text-align: center;">Basics of Data Types</h1>

<p align="left">&nbsp;</p>
<p align="left">The only things in Java that are not objects are the primitive 
  data types, sometimes also called fundamental data types. We will only use some 
  of the primitive data types in this class.</p>
<p align="left">&nbsp;</p>
<h2 align="left">Primitive data types are:</h2>
<table border="1" width="75%">
  <tbody><tr> 
    <td width="19%">int</td>
    <td width="81%"> integers, whole numbers like 1, 0 , 2456, -45</td>
  </tr>
  <tr> 
  </tr><tr> 
    <td width="19%">long</td>
    <td width="81%">also integers, but can hold bigger numbers than int</td>
  </tr>
    <tr><td width="19%">double</td>
    <td width="81%">decimal numbers 61.234, 2.5, -7.3</td>
  </tr>
  <tr> 
    <td width="19%">float </td>
    <td width="81%">also decimal numbers but can not hold as big a number as doubles. 
    </td>
  </tr>
  <tr> 
    <td width="19%">char</td>
    <td width="81%">character data like 'a' , 'y', 'Z','*'</td>
  </tr>
  <tr> 
    <td width="19%">boolean</td>
    <td width="81%">true or false</td>
  </tr>
</tbody></table>
<p>Some types we won't use</p>
<table border="1" width="75%">
  
  <tbody><tr>
    <td width="20%">short</td>
    <td width="80%">also integers, but smaller than int</td>
  </tr>
  <tr>
    <td width="20%">byte</td>
    <td width="80%">also integers, even smaller than short</td>
  </tr>
</tbody></table>
<p>&nbsp;</p>
<h2>Identifiers</h2>
<p>Things you need to refer to in your program are named with identifiers. In 
  Java an identifier is a:</p>
<ul>
  <li>sequence of characters that starts with a letter, underscore (_), or dollar 
    sign ($) </li>
  <li>followed by any number of letters, underscores (_), dollar signs ($), or 
    digits</li>
  <li> an identifier can not be a reserved word - words Java uses for its own 
    purposes like class or public.</li>
</ul>
<p>You have already used identifiers to specify the name of your program class: 
  <code>Welcome</code> and <code>NamePrinter</code>. By convention, all class names 
  start with uppercase letter.</p>
<h2>Variables</h2>
<p>You can think of a variable as a box with a name. The box can contain a value. 
  The name must be a valid Java identifier. Make your variable names meaningful: 
  <code>days</code> rather than <code>d</code> for instance.</p>
<p>By convention, variable names start with a lowercase letter. Any additional 
  word in the variable name is capitalized. This is called camel casing. Here 
  are examples</p>
<ul>
  <li>thisIsCamelCasing</li>
  <li>totalIncome</li>
  <li>dayOfWeek</li>
</ul>
<p>Be sure to use this convention in your code. </p>
<h2>Declaration of primitive data types variables</h2>
<p align="left">We declare primitive data types with a data type and an identifier.</p>
<p class="segment" align="left"> 
int count;</p><p>
  <font face="Courier New, Courier, mono">int</font> is the data type. <font face="Courier New, Courier, mono">count</font> 
  is the identifier. This creates a box in memory that can hold an <font face="Courier New, Courier, mono">int</font> 
  (see chart above). We can refer to the data in the box with the name <font face="Courier New, Courier, mono">count</font>.</p>
<p class="segment" align="left">
double cost;</p>
<p> <font face="Courier New, Courier, mono">double</font> is the data type. <font face="Courier New, Courier, mono">cost</font> 
  is the identifier. This creates a box in memory called <font face="Courier New, Courier, mono">cost</font>, 
  and it can hold a double value. We can access the data in the box with the name 
  <font face="Courier New, Courier, mono">cost</font></p>
<p class="segment" align="left">
char myChar;
</p><p> This creates a box in memory called <font face="Courier New, Courier, mono">myChar</font> 
  and it can hold data of type <font face="Courier New, Courier, mono">char</font> 
  (see chart above).</p>
<p class="segment" align="left">
  boolean done;
</p><p> This creates a box in memory called <font face="Courier New, Courier, mono">done</font> 
  that can hold a <font face="Courier New, Courier, mono">boolean</font>. We will 
  talk more about boolean next lesson.</p>
<p align="left">&nbsp;</p>
<h2 align="left">Assignment Operator</h2>
<p align="left">After declaring the variable, we can use the assignment operator 
  (=) to set the variable to a specific value. Think of it as putting the value 
  into the named box in memory.</p>
<p class="segment" align="left">
count = 7;
</p><p> puts 7 into the box called count.</p>
<p>&nbsp;</p>
<p class="segment" align="left">  cost = 5.42;
</p><p> puts 5.42 into a box called cost.</p>
<p>&nbsp;</p>
<p class="segment" align="left"> 
  myChar = 'A';
</p><p> puts character uppercase A into a box named myChar.</p>
<p>&nbsp;</p>
<p class="segment" align="left"> 
  done = true;
</p><p> puts true into a box named done.</p>
<p>&nbsp;</p>
<h3 align="left">Assigning and declaring in one statement</h3>
<p align="left">We can also declare and assign in one statement.</p>
<p class="segment" align="left">
int count = 7;
</p><p> first creates a box named count (which can hold an int) and then puts 7 into 
  the box.</p>
<p class="segment" align="left">
   double cost = 5.42;
</p><p> first creates a box named cost (which can hold a double) and then puts 5.42 
  into a box</p>
<p class="segment" align="left">
char myChar = 'A';</p>
<p> first creates a box named myChar and then puts character uppercase A into 
  a box</p>
<p class="segment" align="left">
boolean done = true;
</p><p> first creates a box named and then puts <code>true</code> into a box named 
  done</p>
<p align="left">&nbsp;</p>
<h2 align="left">Arithmetic</h2>
<p align="left">We can do basic arithmetic in Java. We do arithmetic on both <code>int</code> 
  and <code>doubles</code>. Most operators will look familiar.</p>
<ul>
  <li> &nbsp;&nbsp;+ add</li>
  <li>&nbsp;&nbsp;- subtract</li>
  <li>&nbsp;&nbsp;* multiply</li>
  <li>&nbsp;&nbsp;/ divide<br>
    <br>
    Division might seem a little strange sometimes. When one of the operands is 
    a double, division behaves just as you would expect. <br>
    <br>
    Examples: 7.0 / 2 is 3.5<br>
    9.0 / 2.0 is 4.5<br>
    1 / 2.0 is 0.5<br>
    <br>
    But when both operands are int, you may be surprised at the outcome. Dividing 
    two ints always gives you an integer. If there is a fractional part, it is 
    thrown away.<br>
    <br>
    Examples:<br>
    7 / 2 is 3<br>
    9 / 2 is 4<br>
    1 / 2 is 0<br>
    <br>
  </li>
  <li> &nbsp;&nbsp;% modulus or remainder operator. <br>
    <br>
    This operator divides the first number by the second, throws away the answer 
    and keeps the remainder. <br>
    <br>
    Examples:<br>
    7 % 2 is 1<br>
    49 % 10 is 9<br>
  </li>
</ul>
<p>&nbsp;</p>
<h2>Character Data</h2>
<p align="left">Character data is another primitive data type and is denoted as 
  <code>char</code>. Characters are delimited by single quotes. 'A' denotes a 
  char. "A" denotes a String. To declare a <code>char</code> variable 
  and assign a value to it:</p>
<p style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;"> char myChar = 'A'; <br>
  char newLine = '\n';</p>
<p align="left">The last statement defines a variable that contains the escape 
  sequence for a new line. Another escape sequence is '\t' to represent a tab. 
  The backslash is used as an escape character. That means that the backslash signals 
  that the following character has a special meaning. The <i>n</i> in <i>\n</i> 
  does not mean a lowercase <i>n</i>. It means a new line.</p>
<p align="left">The char data type is actually an unsigned integer type. Unsigned 
  means the value is always positive or zero. Characters are represented by numeric 
  values - sort of a "secret code." The code Java uses is called Unicode. 
  Unicode can represent most of the world's languages using 2 bytes. You can look 
  at the <a href="http://www.unicode.org/charts/PDF/U0000.pdf">Unicode chart for 
  the English alphabet</a> (called Basic Latin for some reason) at this link. 
  The process of translating a character to its code is called encoding.</p>
<p align="left">In Appendix B of your text will find a table of the ASCII codes. 
  ASCII is an old, one-byte code for representing English alphabet and control 
  characters. Fortunately there is a relationship between ASCII and Unicode. The 
  Unicode for an English letter is one byte of zeros and then the ASCII. The letter 
  'A' in ASCII code is 41 (in hexadecimal); in Unicode it is 0041.</p>
<p align="left">We can assign Unicode values directly to a variable. To assign 
  'A' to a variable myChar, do this:</p>
<p align="left"> <span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">char myChar = '\u0041';</span></p>
<p align="left">&nbsp;</p>
<h2>Casting</h2>
<p> Occasionally we need to assign a value of one type to a variable of another 
  type. If we want to assign an int value to a double, there is no problem. Just 
  do it. An int will "fit" in a double with no loss of data.
</p><p style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
int intCost = 10;<br>
  double doubleCost = intCost; //no problem</p>
<p>&nbsp;</p>
<p>But if we want to assign a double value to an int variable, the compiler will 
  not let us. There is no place to store the decimal portion of a double in an 
  int variable. Data might be lost. The compiler thinks perhaps you have made 
  a mistake.</p>
<p style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
   double doubleCost = 10.99;<br>
  int intCost= doubleCost; //compile time error (red squiggly line in Eclipse)</p>  

<p>But sometimes we really do want to do this. Either we know that the double 
  doesn't have a decimal portion, or we are willing to accept the loss. In that 
  case we "cast" the <code>double</code> to an <code>int</code> like 
  this:</p>
<span style=" font-family: 'Courier New', Courier, monospace;
     line-height: 133%;
     font-size: 110%;    
     border: thin navy solid;
     padding: 0.5em 0.5em 0.5em 40px;
     color: navy;
     background-color: #FFFF99;
     margin:  1em 5em 1em 1em;">
      intCost = (int)doubleValue;</span>
<p>When we cast, we are telling the compiler that we really do want to do this and to please stop complaining and just do it.</p>
<div style="   border: medium navy solid;
   margin-right: 5em;
   padding: 1px 5px 5px 10px;">
<span style="font-family: Georgia, 'Times New Roman', Times, serif;
     color: navy;
     font-weight: bold;
     font-size: 150%;">Next</span>
  <p>Now let's talk about constants.</p>
</div>


</body></html>